[[indices-resolve-cluster-api]]
=== Resolve cluster API
++++
<titleabbrev>Resolve cluster</titleabbrev>
++++

Resolves the specified index expressions to return information about
each cluster, including the local cluster, if included.

This endpoint is useful before doing a <<modules-cross-cluster-search,{ccs}>> in
order to determine which remote clusters should be included in a search.

You use the same index expression with this endpoint as you would for cross-cluster
search. Index and <<exclude-problematic-clusters,cluster exclusions>> are also supported
with this endpoint.

For each cluster in the index expression, information is returned about:

1. whether the querying ("local") cluster is currently connected to the remote cluster
2. whether the remote cluster is configured with `skip_unavailable` as `true` or `false`
3. whether there are any indices, aliases or data streams on that cluster that match
   the index expression
4. cluster version information, including the Elasticsearch server version

////
[source,console]
--------------------------------
PUT _cluster/settings
{
  "persistent": {
    "cluster": {
      "remote": {
        "cluster_one": {
          "seeds": [
            "35.238.149.1:9300"
          ],
          "skip_unavailable": true
        },
        "cluster_two": {
          "seeds": [
            "35.238.149.2:9300"
          ],
          "skip_unavailable": false
        }
      }
    }
  }
}
--------------------------------
// TEST[setup:host]
// TEST[s/35.238.149.\d+:930\d+/\${transport_host}/]
////

[source,console]
----
GET /_resolve/cluster/my-index-*,cluster*:my-index-*
----
// TEST[continued]

This will return information about the local cluster and all remotely configured
clusters that start with the alias `cluster*`. Each cluster will return information
about whether it has any indices, aliases or data streams that match `my-index-*`

[[resolve-cluster-api-request]]
==== {api-request-title}

`GET /_resolve/cluster/<index_expression>`

[[resolve-cluster-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the
`view_index_metadata`, `read`, or `manage` <<privileges-list-indices,index
privilege>> for the target data stream, index, or alias.

[[resolve-index-api-path-params]]
==== {api-path-parms-title}

`<index_expression>`::
+
--
(Required, string) Comma-separated name(s) or index pattern(s) of the
indices, aliases, and data streams to resolve, using <<api-multi-index>>.
Resources on <<remote-clusters,remote clusters>> can be specified using the
`<cluster>:<name>` syntax.
--

[[resolve-cluster-api-query-params]]
==== {api-query-parms-title}

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]
+
Defaults to `open`.

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]
+
Defaults to `false`.

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]
+
Defaults to `true`.


[discrete]
[[usecases-for-resolve-cluster]]
=== Examples of why this endpoint is useful before doing a {ccs}.

You may want to exclude a remote cluster from a search when:

1. The remote cluster is not currently connected and is configured as `skip_unavailable`=`false`.
Executing a {ccs} under those conditions will cause
<<cross-cluster-search-failures,the entire search to fail>>.

2. The remote cluster has no matching indices, aliases or data streams for the index expression
(or your user does not have permissions to search them). For example, suppose your
index expression is `logs*,remote1:logs*` and the `remote1` cluster has no indices, aliases or data
streams that match `logs*`. In that case, that cluster will return nothing if you include it in
a {ccs}.

3. The remote cluster is an older version that does not support the feature you want to
use in your search. (Note that officially, cross-cluster searches are only supported back
to the <<ccs-supported-configurations,previous minor version>>.)


[[resolve-index-api-example]]
==== {api-examples-title}

[source,console]
----
GET /_resolve/cluster/my-index*,clust*:my-index*
----
// TEST[continued]
// TEST[setup:my_index]

The API returns the following response:

[source,console-result]
----
{
  "(local)": {          <1>
    "connected": true,
    "skip_unavailable": false,
    "matching_indices": true,
    "version": {
      "number": "8.13.0",
      "build_flavor": "default",
      "minimum_wire_compatibility_version": "7.17.0",
      "minimum_index_compatibility_version": "7.0.0"
    }
  },
  "cluster_one": {
    "connected": true,         <2>
    "skip_unavailable": true,  <3>
    "matching_indices": true,  <4>
    "version": {
      "number": "8.13.0",      <5>
      "build_flavor": "default",
      "minimum_wire_compatibility_version": "7.17.0",
      "minimum_index_compatibility_version": "7.0.0"
    }
  },
  "cluster_two": {
    "connected": true,
    "skip_unavailable": false,
    "matching_indices": true,
    "version": {
      "number": "8.13.0",
      "build_flavor": "default",
      "minimum_wire_compatibility_version": "7.17.0",
      "minimum_index_compatibility_version": "7.0.0"
    }
  }
}
----
// TESTRESPONSE[s/"number": "8.13.0"/"number": "$body.$_path"/]
// TESTRESPONSE[s/"minimum_wire_compatibility_version": "7.17.0"/"minimum_wire_compatibility_version": "$body.$_path"/]
// TESTRESPONSE[s/"minimum_index_compatibility_version": "7.0.0"/"minimum_index_compatibility_version": "$body.$_path"/]

<1> Each cluster has its own response section. The cluster you sent the request to is labelled as "(local)".
<2> The querying cluster attempts to make a request to each remote cluster. If successful, `connected`=`true`.
<3> The `skip_unavailable` setting for each remote cluster as configured on the local cluster.
<4> Indicates whether any index, alias or data stream matches the index expression specified for that cluster.
<5> The Elasticsearch server version.
